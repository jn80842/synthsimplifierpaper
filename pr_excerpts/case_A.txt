Description:
------------

Simplify x == x for both boolean and numeric values of x.

Selected comments:
------------------

I can't believe we missed this rule.

I audited that piece of code recently, and also completely missed that case.


Diff:
---------------

diff --git a/src/Simplify_EQ.cpp b/src/Simplify_EQ.cpp
index c3d10e69509b..b0013cc09424 100644
--- a/src/Simplify_EQ.cpp
+++ b/src/Simplify_EQ.cpp
@@ -23,11 +23,14 @@ Expr Simplify::visit(const EQ *op, ExprInfo *bounds) {
     if (op->a.type().is_bool()) {
         Expr a = mutate(op->a, nullptr);
         Expr b = mutate(op->b, nullptr);
+        const int lanes = op->type.lanes();
         auto rewrite = IRMatcher::rewriter(IRMatcher::eq(a, b), op->type);
         if (rewrite(x == 1, x)) {
             return rewrite.result;
         } else if (rewrite(x == 0, !x)) {
             return mutate(std::move(rewrite.result), bounds);
+        } else if (rewrite(x == x, const_true(lanes))) {
+            return rewrite.result;
         } else if (a.same_as(op->a) && b.same_as(op->b)) {
             return op;
         } else {
@@ -39,6 +42,11 @@ Expr Simplify::visit(const EQ *op, ExprInfo *bounds) {
     Expr delta = mutate(op->a - op->b, &delta_bounds);
     const int lanes = op->type.lanes();

+    // If the delta is 0, then it's just x == x
+    if (is_zero(delta)) {
+        return const_true(lanes);
+    }
+
     // Attempt to disprove using bounds analysis
     if (delta_bounds.min_defined && delta_bounds.min > 0) {
         return const_false(lanes);
