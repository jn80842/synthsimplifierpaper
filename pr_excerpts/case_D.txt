Description:
------------

Grab-bag of simplifier fixes from [work-in-progress branch]

Selected comments:
------------------

N/A -- intent was to reduce the diff size to simplify subsequent merge work

Diff:
---------------

diff --git a/src/Simplify_LT.cpp b/src/Simplify_LT.cpp
index 51f2b280b33e..d76181fe33c3 100644
--- a/src/Simplify_LT.cpp
+++ b/src/Simplify_LT.cpp
@@ -339,6 +339,12 @@ Expr Simplify::visit(const LT *op, ExprInfo *bounds) {
               rewrite(max(y, (x + c2)/c0) < x/c0, false, c0 > 0 && c2 >= 0) ||
               rewrite(min(y, (x + c2)/c0) < x/c0, true, c0 > 0 && c2 + c0 <= 0) ||

+              // Comparison of two mins/maxes that don't cancel when subtracted
+              rewrite(min(x, c0) < min(x, c1), false, c0 >= c1) ||
+              rewrite(min(x, c0) < min(x, c1) + c2, false, c0 >= c1 + c2) ||
+              rewrite(max(x, c0) < max(x, c1), false, c0 >= c1) ||
+              rewrite(max(x, c0) < max(x, c1) + c2, false, c0 >= c1 + c2) ||
+
               // Comparison of aligned ramps can simplify to a comparison of the base
               rewrite(ramp(x * c3 + c2, c1) < broadcast(z * c0),
                       broadcast(x * fold(c3/c0) + fold(c2/c0) < z, lanes),
diff --git a/src/Simplify_Mod.cpp b/src/Simplify_Mod.cpp
index 4f27559ecc0c..0abaf05c0a54 100644
--- a/src/Simplify_Mod.cpp
+++ b/src/Simplify_Mod.cpp
@@ -47,6 +47,7 @@ Expr Simplify::visit(const Mod *op, ExprInfo *bounds) {
             rewrite(IRMatcher::Overflow() % x, a) ||
             rewrite(x % IRMatcher::Overflow(), b) ||
             rewrite(0 % x, 0) ||
+            rewrite(x % x, 0) ||
             (!op->type.is_float() &&
              (rewrite(x % 0, IRMatcher::Indeterminate()) ||
               rewrite(x % 1, 0)))) {
diff --git a/test/correctness/simplify.cpp b/test/correctness/simplify.cpp
index ce7bd0adc0de..2528335203f8 100644
--- a/test/correctness/simplify.cpp
+++ b/test/correctness/simplify.cpp
@@ -1114,6 +1114,12 @@ void check_boolean() {
     check(x <= 20 && x >= 20, x <= 20 && 20 <= x);
     check(x >= 20 && x <= 20, 20 <= x && x <= 20);

+    check(min(x, 20) < min(x, 19), const_false());
+    check(min(x, 23) < min(x, 18) + 3, const_false());
+
+    check(max(x, 19) > max(x, 20), const_false());
+    check(max(x, 19) > max(x, 18) + 3, const_false());
+
     // check for substitution patterns
     check((b1 == t) && (b1 && b2), b1 && b2);
     check((b1 && b2) && (b1 == t), b1 && b2);
